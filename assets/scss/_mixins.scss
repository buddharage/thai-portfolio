@mixin respond-to($value, $condition: min-width, $media: screen){

	@if $value == bp280{
		$value: 17.5em;
	}@else if $value == bp450{
		$value: 31.25em;
	}@else if $value == bp550{
		$value: 34.375em;
	}@else if $value == bp600{
		$value: 37.5em;
	}@else if $value == bp650{
		$value: 40.625em;
	}@else if $value == bp700{
		$value: 43.75em;
	}@else if $value == bp750{
		$value: 46.875em
	}@else if $value == bp800{
		$value: 50em;
	}@else if $value == bp850{
		$value: 53.125em;
	}@else if $value == bp900{
		$value: 56.25em;
	}@else if $value == bp970{
		$value: 60.625em;
	}@else if $value == bp1000{
		$value: 62.5em;
	}@else if $value == bp1150{
		$value: 71.875em;
	}@else if $value == bp1200{
		$value: 75em;
	}@else if $value == bpheight240{
		$value: 15em;
	}@else if $value == bpheight300{
		$value: 18.75em;
	}

	@media only #{$media} and ($condition: $value){@content;}
}

@mixin clearfix(){
	overflow:hidden;
	zoom:1;
	*-ms-inject: expression(this.x||(this.innerHTML+='<br\ style="clear:both;font:0/0">',this.x=1));
}

@mixin clearfix2{
	*zoom: 1;

	&:before,
	&:after{
		content : " ";
		display: table;
	}

	&:after{
		clear: both;
	}
}

@mixin wrapper(){
	margin: 0 auto;
	max-width: $desktopMaxWidth;
	padding-left: 1em;
	padding-right: 1em;

	@include respond-to(bp1000) {
		padding-left: 0;
		padding-right: 0;
	}
}

@mixin defaults($width: 100%, $margin: 0 auto, $padding: 0, $position: relative){
	width: $width;
	margin: $margin;
	padding: $padding;
	position: $position;
}

@mixin transitions($prop: all, $time: 0.3 + s, $ease: ease-in-out, $delay: 0s){
	-webkit-transition: $prop $time $ease $delay;
	-moz-transition: $prop $time $ease $delay;
	-o-transition: $prop $time $ease $delay;
	transition: $prop $time $ease $delay;
}

@mixin ieopacity($a){
	opacity: $a / 100;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$a})";
	filter: alpha(opacity = $a);
}

@mixin gradient($from, $to, $start, $end, $imp: false){
	background: -moz-linear-gradient(top, $from $start, $to $end); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop($start, $from), color-stop($end, $to)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, $from $start, $to $end); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, $from $start, $to $end); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, $from $start, $to $end); /* IE10+ */
	background: linear-gradient(top, $from $start, $to $end); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0 ); /* IE6-9 */
}

@mixin user-select($val: none){
	-webkit-touch-callout: $val;
	-webkit-user-select: $val;
	-khtml-user-select: $val;
	-moz-user-select: $val;
	-ms-user-select: $val;
	user-select: $val;
}

@mixin animate($name, $duration: 1s, $cycle: infinite, $ease: ease){
	-webkit-animation: $name $duration $cycle $ease;
	-moz-animation: $name $duration $cycle $ease;
	-o-animation: $name $duration $cycle $ease;
	animation: $name $duration $cycle $ease;
}

@mixin animation-delay($delay){
	-webkit-animation-delay: $delay;
	-moz-animation-delay: $delay;
	-o-animation-delay: $delay;
	animation-delay: $delay;
}

@mixin animation($name){
	@-webkit-keyframes $name{@content;}
	@-moz-keyframes $name{@content;}
	@-o-keyframes $name{@content;}
	@keyframes $name{@content;}
}

// Delegate method to another method that takes in "global" variables
// Variables defined in _variables.scss
@mixin retina-sprite($name, $hover: false, $active: false){
	@include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
}

/**
* The general purpose retina sprite mixin.
*
* @include retina-sprite(name, $spritemap1, $spritemap2)
*
* If `dimensions` is true, then width/height will also be set.
*
*/
@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true) {
	@if $dimensions == true{
		@include sprite-dimensions($sprites, $name);
	}

	background-image: sprite-url($sprites);
	background-position: sprite-position($sprites, $name);
	background-repeat: no-repeat;

	@if $hover == true{
		$name_hover: $name + _hover;

		&:hover{
			background-position: sprite-position($sprites, $name_hover);
		}
	}

	@if $active == true{
		$name_active: $name + _active;

		&:active{
			background-position: sprite-position($sprites, $name_active);
		}
	}

	@media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
		&{
			$pos: sprite-position($sprites2x, $name);
			background-image: sprite-url($sprites2x);
			background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;

			//sprite-path() returns the path of the generated sprite sheet, which
			//image-width() calculates the width of. the ceil() is in place in case
			//you have sprites that have an odd-number of pixels in width
			@include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);

			@if $hover == true{
				$name_hover: $name + _hover;    // create myButton_hover and assign it

				&:hover{
					$pos: sprite-position($sprites2x, $name_hover);
					background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
				}
			}

			@if $active == true{
				$name_active: $name + _active;    // create myButton_active and assign it

				&:active{
					$pos: sprite-position($sprites2x, $name_active);
					background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
				}
			}
		}
	}
}
